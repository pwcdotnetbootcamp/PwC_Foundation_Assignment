SELECT * FROM
    production.products
WHERE
    category_id = 1
AND list_price > 400;

SELECT
    product_name,
    list_price
FROM
    production.products
WHERE
    list_price < 100
OR list_price > 10000;

SELECT  product_name,  list_price
FROM  production.products
WHERE  
list_price IN (89.99, 109.99, 159.99);

SELECT  product_name, list_price
FROM   production.products
WHERE
    list_price NOT IN (89.99, 109.99, 159.99);


	SELECT customer_id, first_name, last_name,  phone
FROM  sales.customers
WHERE  phone IS NULL;

SELECT customer_id, first_name, last_name,  phone
FROM  sales.customers
WHERE  phone IS NOT NULL;

SELECT TOP 10
    product_name, list_price
FROM   production.products;


SELECT TOP 2 Percent
    product_name, list_price
FROM   production.products;

SELECT 
    product_name, list_price
FROM   production.products;



SELECT TOP 5
--WITH TIES
    list_price
FROM production.products 
order by list_price;



SELECT TOP 5
WITH TIES
    list_price
FROM production.products 
order by list_price;

SELECT TOP 3 WITH TIES
    product_name, list_price
FROM production.products 
order by product_name, list_price;

Select * from sales.customers where first_name like 'a%';
Select * from sales.customers where first_name like '_a%';

Select * from sales.customers where first_name like '____';

Select * from sales.customers where first_name like '%a_';
Select * from sales.customers where first_name like '%a';


SELECT
    product_id,
    product_name,
    list_price
FROM
    production.products
WHERE
    list_price BETWEEN 149.99 AND 199.99 --inclusive of 149.99 and 199.99
ORDER BY
    list_price;


	SELECT
    product_id,
    product_name,
    list_price
FROM
    production.products
WHERE
    list_price NOT BETWEEN 149.99 AND 199.99
ORDER BY
    list_price;


	SELECT * FROM SALES.CUSTOMERS 
   ORDER BY FIRST_NAME, last_name;

   select COUNT( distinct city) as[no of cities] , state from sales.customers group by state;



SELECT * FROM SALES.CUSTOMERS 
   ORDER BY FIRST_NAME asc, last_name desc;

SELECT * FROM SALES.CUSTOMERS 
   ORDER BY FIRST_NAME DESC;

use BikeStores;


SELECT 
SALES.customers.first_name,
SALES.customers.last_name,
sales.orders.order_id,
SALES.orders.order_status,
sales.staffs.first_name,
sales.staffs.last_name

FROM sales.customers
JOIN sales.orders
ON 
	SALES.customers.customer_id = SALES.orders.customer_id
JOIN 
sales.staffs
ON
	sales.staffs.staff_id = sales.orders.staff_id;





select * from production.products;


..........................................................................................................................


use testdb;

ALTER TABLE emp2
DROP CONSTRAINT emp2_pk;

CREATE TABLE Project (
  ProjectCode int CONSTRAINT pkProjectCode PRIMARY KEY,
  Description varchar(50) not null CONSTRAINT unDesc UNIQUE
);

ALTER TABLE emp 
ADD CONSTRAINT emp_pk PRIMARY KEY (EmpCode); 

ALTER TABLE EmployeeLeave
ADD CONSTRAINT rfkcEmployeeID 
FOREIGN KEY(EmployeeID) 
REFERENCES Emp(EmpCode)
ON DELETE NO ACTION 
ON UPDATE NO ACTION
;

CREATE TABLE products  
( product_id INT PRIMARY KEY,  
  product_name VARCHAR(50) NOT NULL,  
  category VARCHAR(25)  
); 
 
CREATE TABLE inventory  
( inventory_id INT PRIMARY KEY,  
  product_id INT NOT NULL,  
  quantity INT,  
  min_level INT,  
  max_level INT,  
  CONSTRAINT fk_inv_product_id  
    FOREIGN KEY (product_id)  
    REFERENCES products (product_id)  
); 

CREATE TABLE products2  
( product_name VARCHAR(50) NOT NULL,  
  location VARCHAR(50) NOT NULL,  
  category VARCHAR(25)  
  CONSTRAINT products_pk PRIMARY KEY (product_name, location)  
);  

CREATE TABLE inventory2  
( inventory_id INT PRIMARY KEY,  
  product_name VARCHAR(50) NOT NULL,  
  location VARCHAR(50) NOT NULL,  
  quantity INT,  
  min_level INT,  
  max_level INT,  
  CONSTRAINT fk_inv_product  
    FOREIGN KEY (product_name, location)  
    REFERENCES products2 (product_name, location)  
); 

ALTER TABLE inventory
DROP CONSTRAINT fk_inv_product_id;  

CREATE TABLE EmployeeLeave2
(
EmployeeID int,
LeaveStartDate datetime CONSTRAINT cpkLeaveStartDate PRIMARY KEY(EmployeeID, LeaveStartDate),
LeaveEndDate datetime NOT NULL,
LeaveReason varchar(100),
LeaveType char(2) CONSTRAINT chkLeave CHECK(LeaveType IN('CL','SL','PL'))
);

CREATE TABLE Emp5
	(
	DeptCode char(4) CHECK (DeptCode LIKE '[0-9][0-9][0-9][0-9]')
	);
	
	DROP TABLE Emp5;

	CREATE TABLE emp6
(
sal money CHECK (sal BETWEEN 20000 AND 80000)
);

CREATE TABLE EmployeeLeave3
		(
		LeaveType char(2) CONSTRAINT chkLeave3 	CHECK(LeaveType IN('CL','SL','PL')) 	CONSTRAINT chkDefLeave DEFAULT 'PL'
		);


		
CREATE TABLE EmployeeLeave4
		(
		LeaveType char(2) 	CONSTRAINT chkDefLeave2 DEFAULT 'PL'
		);



		CREATE TABLE CUSTOMERS( 
   ID   INT              NOT NULL, 
   NAME VARCHAR (20)     NOT NULL, 
   AGE  INT              NOT NULL, 
   ADDRESS  CHAR (25) , 
   SALARY   DECIMAL (18, 2),        
   PRIMARY KEY (ID)
);

exec sp_columns CUSTOMERS;

INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY) VALUES (1, 'Ramesh', 32, 'Ahmedabad', 2000.00 );

INSERT INTO CUSTOMERS VALUES (7, 'Muffy', 24, 'Indore', 10000.00 );

INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY) 
VALUES (8, 'Khilan', 22, 'Delhi', null );  
INSERT INTO CUSTOMERS (ID,NAME,AGE, SALARY) 
VALUES (9, 'Mililan', 28, null );  


INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY) VALUES 
(3, 'kaushik', 23, 'Kota', 2000.00 ),
(4, 'Chaitali', 25, 'Mumbai', 6500.00 ),
(5, 'Hard', 27, 'Bhopal', 8500.00 ),
(6, 'Komal', 22, 'MP', 4500.00 );

SELECT * INTO CUSTOMERS_BKP FROM CUSTOMERS;
SELECT * FROM CUSTOMERS_BKP;


CREATE TABLE CUSTOMERS_Bkp1( 
   ID   INT              NOT NULL, 
   NAME VARCHAR (20)     NOT NULL, 
   AGE  INT              NOT NULL, 
   ADDRESS  CHAR (25) , 
   SALARY   DECIMAL (18, 2),        
   PRIMARY KEY (ID));

INSERT INTO CUSTOMERS_BKP1 
SELECT * FROM CUSTOMERS;

SELECT * FROM CUSTOMERS_Bkp1;

select * from CUSTOMERS;
select * from CUSTOMERS_BKP;

CREATE TABLE Members
(
	Id INT PRIMARY KEY,
	first_name varchar(20),
	last_name varchar(20),
	movie_id INT
	);

CREATE TABLE movies
(
	Id INT PRIMARY KEY,
	title varchar(50),
	category varchar(30)
	);

INSERT INTO Members (Id, first_name, last_name, movie_id) VALUES
(1,'Adam','Smith',1), 
(2, 'Ravi', 'Kumar', 2), 
(3, 'Susan', 'Davidson', 5),
(4, 'Jenny', 'Adrianna', 8),
(6,'Lee','Pong',10);

INSERT INTO movies (Id, title, category) VALUES
(1,'ASSASSINS CREED: EMBERS','Animations'),
(2,'Real Steel(2012)','Animations'),
(3,'Alvin and the Chipmunks','Animations'),
(4,'The Adventures of Tin Tin','Animations'),
(5,'Safe (2012)','Action'),
(6,'Safe House(2012)','Action'),
(7,'3 Idiots','Drama'),
(8,'Ghazni','Drama'),
(9,'Nayak','Drama'),
(10,'Marley and me','Family');


UPDATE CUSTOMERS
SET ADDRESS = 'PUNE'
WHERE ID = 6;

SELECT * FROM CUSTOMERS;

UPDATE CUSTOMERS_bkp1 
SET ADDRESS = 'Pune', SALARY = 1000.00;


SELECT * FROM CUSTOMERS_bkp1;


DELETE FROM CUSTOMERS_Bkp1 WHERE ID > 7;

SELECT * FROM CUSTOMERS_Bkp1;

DELETE FROM CUSTOMERS_Bkp1;

SELECT * FROM CUSTOMERS_Bkp1;

SELECT ID, NAME, SALARY  
FROM CUSTOMERS 
WHERE SALARY > 2000;


SELECT * FROM CUSTOMERS_bkp1;

Insert into CUSTOMERS_BKP1 values(10,'Ab_xy',28,'Dli%wow',89.00);
Insert into CUSTOMERS_BKP1 values(11,'A_xy',28,'Dl%wow',89.00);
Insert into CUSTOMERS_BKP1 values(12,'12Ab_xy',28,'34Dli%wow',89.00);

select name from CUSTOMERS_BKP1 where name like '%[_]%';
select address from CUSTOMERS_BKP1 where address like '%[%]%';

select name from CUSTOMERS_BKP1 where name like '[0-9]%';
select name from CUSTOMERS_BKP1 where name like '[a-z]%';
select name from CUSTOMERS_BKP1 where name like '[a-z0-9]%';


select sum(salary) as 'Total Expense' from customers;
select sum(salary) as 'Total Expense' from customers where id < 7;
select min(salary) as 'Total Expense' from customers;
select min(salary),max(salary), avg(salary),sum(salary), count(name)  from customers;

update Customers set address= 'Kolkata' where id between 3 and 5;

update Customers set address= 'Gurgaon' where id >6;

update Customers set address= 'Mumbai' where address not in ('Kolkata','Gurgaon');

SELECT Address, SUM(SALARY) as [sum of salary] FROM CUSTOMERS  GROUP BY Address;



SELECT Address, SUM(SALARY) as [sum of salary] FROM CUSTOMERS where age < 26 GROUP BY Address;

SELECT Address, SUM(SALARY) as [sum of salary] FROM CUSTOMERS  GROUP BY Address having sum(salary)>9000;



select distinct address from customers;

select count(Address) from Customers;
select count(distinct Address) from Customers;


CREATE TABLE ORDERS (
   ID          INT        NOT NULL,
   DATE        DATETIME, 
   CUSTOMER_ID INT references CUSTOMERS(ID),
   AMOUNT    DECIMAL (18, 2),  
   PRIMARY KEY (ID)
);

select * from Orders;

INSERT INTO ORDERS VALUES (100, '2020-10-08',  3, 1500.00  );
INSERT INTO ORDERS VALUES (104, '2020-10-08',  7, 1500.00  );

INSERT INTO ORDERS VALUES 
 	(101, '2020-10-20',  3, 1560.00 ),
 	(102, '2020-10-08',  3, 3000.00  ),
 	(103, '2020-05-20', 4, 2060.00);

	select * from Orders;

	CREATE TABLE EMPTBL (NAME VARCHAR(20), SAL VARCHAR(20), MANAGER VARCHAR(20));
Insert into Emptbl values('A',2000,'B'),('B',5000,'C'),('C',1000,null),('D',4000,'C');
select * from Emptbl;


select e2.SAL     
from Emptbl e1 join Emptbl e2
on e1.MANAGER = e2.NAME and e1.name = 'B';






create table tbl1(A varchar(3),B varchar(3));
create table tbl2(B varchar(3),C varchar(3));

insert into tbl1 values('A1','B1'),('A2','B2'),('A3','B3');

insert into tbl2 values('B1','C1'),('B3','C3'),('B5','C5');
select * from tbl1;
select * from tbl2;
--Inner Join:
select tbl1.A, tbl1.B, tbl2.B, tbl2.C from tbl1 join tbl2 on tbl1.B = tbl2.B;
--Left Outer Join:
select tbl1.A, tbl1.B, tbl2.B, tbl2.C from tbl1 left outer join tbl2 on tbl1.B = tbl2.B;
--right Outer Join:
select tbl1.A, tbl1.B, tbl2.B, tbl2.C from tbl1 right outer join tbl2 on tbl1.B = tbl2.B;
--full outer join:
select tbl1.A, tbl1.B, tbl2.B, tbl2.C from tbl1 full outer join tbl2 on tbl1.B = tbl2.B;





